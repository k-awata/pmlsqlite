!!PMLSQLITEPATH()
import '$!!PMLSQLITEPATH'
handle any
endhandle

define object PMLSQLiteTest
    member .sampleData is STRING
endobject

define method .setup()
    !this.sampleData = |BEGIN TRANSACTION;
CREATE TABLE "pets" (
    "id"     INTEGER NOT NULL,
    "name"   TEXT,
    "height" REAL,
    PRIMARY KEY("id" AUTOINCREMENT)
);
INSERT INTO "pets" VALUES
    (1, 'Abby', 200),
    (2, 'Banshee', 150),
    (3, 'Casper', 250);
COMMIT;|
endmethod

define method .testDbInMemory(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !assert.equal('', !db.FileName())
    !db.Prepare(!this.sampleData).Execute()
    !actual = !db.Prepare(|SELECT name FROM pets WHERE id = 2;|).QueryOne()
    !db.Close()

    !assert.equal('Banshee', !actual)
endmethod

define method .testDbInFile(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !file = object FILE('%temp%\PMLSQLiteTest.db')
    !file.DeleteFile()

    -- Write DB
    !db = object PMLSQLite()
    !db.SetDataSource(!file.Name())
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !db.Close()
    !assert.isTrue(!file.Exists())

    -- Read DB
    !db = object PMLSQLite()
    !db.SetDataSource(!file.Name())
    !db.Open()
    !actual = !db.Prepare(|SELECT name FROM pets WHERE id = 2;|).QueryOne()
    !db.Close()
    !assert.equal('Banshee', !actual)
endmethod

define method .testDbIsOpen(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !assert.isFalse(!db.IsOpen())
    !db.Open()
    !assert.isTrue(!db.IsOpen())
    !db.Close()
    !assert.isFalse(!db.IsOpen())
endmethod

define method .testDbBackup(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !src = object PMLSQLite()
    !dst = object PMLSQLite()
    !src.SetDataSource(':memory:')
    !dst.SetDataSource(':memory:')
    !src.Open()
    !dst.Open()
    !src.Prepare(!this.sampleData).Execute()
    !src.Backup(!dst)

    !assert.equal('Banshee', !dst.Prepare(|SELECT name FROM pets WHERE id = 2;|).QueryOne())
    !dst.Prepare(|DELETE FROM pets WHERE id = 2;|).Execute()
    !assert.equal('Banshee', !src.Prepare(|SELECT name FROM pets WHERE id = 2;|).QueryOne())

    !src.Close()
    !dst.Close()
endmethod

define method .testDbAutoCommit(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !assert.isTrue(!db.AutoCommit())
    !db.Prepare(|BEGIN TRANSACTION;|).Execute()
    !assert.isFalse(!db.AutoCommit())
    !db.Prepare(|COMMIT;|).Execute()
    !assert.isTrue(!db.AutoCommit())
    !db.Close()
endmethod

define method .testDbChanges(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !assert.equal(3, !db.Changes())
    !db.Prepare(|DELETE FROM pets WHERE id = 1;|).Execute()
    !assert.equal(1, !db.Changes())
    !db.Close()
endmethod

define method .testDbLastInsertRowId(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !assert.equal(3, !db.LastInsertRowId())
    !db.Prepare(|INSERT INTO "pets" VALUES (4, 'Domino', 220);|).Execute()
    !assert.equal(4, !db.LastInsertRowId())
    !db.Close()
endmethod

define method .testDbPrepareFromArray(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !actual = !db.Prepare(!this.sampleData).String()
    !db.Close()

    !assert.equal(!this.sampleData, !actual)
endmethod

define method .testStatementBind(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !actual = !db.Prepare(|SELECT name FROM pets WHERE height BETWEEN @min AND @max;|) $
        .Bind('@min', 180).Bind('@max', 220).QueryOne()
    !db.Close()

    !assert.equal('Abby', !actual)
endmethod

define method .testStatementQuery(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|
        SELECT * FROM pets WHERE id = 1 OR id = 2;
        SELECT * FROM pets WHERE id = 3|).Query()

    !expectedId[1][1] = '1'
    !expectedId[1][2] = '2'
    !expectedId[2][1] = '3'
    !expectedName[1][1] = 'Abby'
    !expectedName[1][2] = 'Banshee'
    !expectedName[2][1] = 'Casper'
    !expectedHeight[1][1] = '200'
    !expectedHeight[1][2] = '150'
    !expectedHeight[2][1] = '250'

    do !res
        do !row
            break if not !result.Read()
            !assert.equal(!expectedId[!res][!row], !result.Fetch('id'))
            !assert.equal(!expectedName[!res][!row], !result.Fetch('name'))
            !assert.equal(!expectedHeight[!res][!row], !result.Fetch('height'))
        enddo
        break if not !result.NextResult()
    enddo
    !db.Close()
endmethod

define method .testResultIsClose(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|SELECT * FROM pets;|).Query()
    !assert.isFalse(!result.IsClosed())
    !result.Close()
    !assert.isTrue(!result.IsClosed())
    !db.Close()
endmethod

define method .testResultHasRows(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|SELECT * FROM pets; SELECT * FROM pets WHERE id = 99|).Query()
    !assert.isTrue(!result.HasRows())
    !result.NextResult()
    !assert.isFalse(!result.HasRows())
    !db.Close()
endmethod

define method .testResultColumnNames(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|SELECT * FROM pets;|).Query()
    !actual = !result.ColumnNames()
    !db.Close()

    !expected[1] = 'id'
    !expected[2] = 'name'
    !expected[3] = 'height'
    !assert.equal(!expected, !actual)
endmethod

define method .testResultColumnTypes(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|SELECT * FROM pets;|).Query()
    !actual = !result.ColumnTypes()
    !db.Close()

    !expected[1] = 'INTEGER'
    !expected[2] = 'TEXT'
    !expected[3] = 'REAL'
    !assert.equal(!expected, !actual)
endmethod

define method .testResultFetchRow(!assert is PmlAssert)
    using namespace 'PMLSQLite'
    !db = object PMLSQLite()
    !db.SetDataSource(':memory:')
    !db.Open()
    !db.Prepare(!this.sampleData).Execute()
    !result = !db.Prepare(|SELECT * FROM pets WHERE id = 2;|).Query()
    !result.Read()
    !actual = !result.FetchRow()
    !db.Close()

    !expected[1] = '2'
    !expected[2] = 'Banshee'
    !expected[3] = 150
    !assert.equal(!expected, !actual)
endmethod
